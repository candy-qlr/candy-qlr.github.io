(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[48],{5978:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-517654c9",path:"/interview/js.html",title:"js",lang:"en-US",frontmatter:{title:"js"},excerpt:"",headers:[{level:2,title:"1. fn1.call.call(fn2)",slug:"_1-fn1-call-call-fn2",children:[]},{level:2,title:"2. 手写 call",slug:"_2-手写-call",children:[]},{level:2,title:"0 与 -0",slug:"_0-与-0",children:[]}],filePathRelative:"interview/js.md",git:{updatedTime:1625219128e3,contributors:[]}}},3383:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="打印输出"><a class="header-anchor" href="#打印输出">#</a> 打印输出</h1><h2 id="_1-fn1-call-call-fn2"><a class="header-anchor" href="#_1-fn1-call-call-fn2">#</a> 1. <code>fn1.call.call(fn2)</code></h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">fn1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span>  <span class="token comment">// 1</span>\nfn1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span> <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>解析</strong>：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">fn1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token parameter">fn2</span><span class="token punctuation">)</span>\n <span class="token operator">=&gt;</span> fn2<span class="token punctuation">.</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nfn1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token parameter">fn2</span><span class="token punctuation">)</span>\n <span class="token operator">=&gt;</span> call <span class="token operator">=</span> fn1<span class="token punctuation">.</span><span class="token parameter">call</span>\n <span class="token operator">=&gt;</span> <span class="token function">call</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token parameter">fn2</span><span class="token punctuation">)</span>\n <span class="token operator">=&gt;</span> <span class="token function">fn2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_2-手写-call"><a class="header-anchor" href="#_2-手写-call">#</a> 2. 手写 call</h2><ul><li>第一个参数是函数的上下文 this 指向的对象</li><li>剩余参数</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">mycall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    context <span class="token operator">=</span> context <span class="token operator">??</span> window <span class="token comment">// undefined或者null返回window</span>\n    context<span class="token punctuation">.</span>_fn <span class="token operator">=</span> <span class="token keyword">this</span>\n    <span class="token keyword">const</span> res <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">_fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>\n    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>_fn\n    <span class="token keyword">return</span> res\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_0-与-0"><a class="header-anchor" href="#_0-与-0">#</a> 0 与 -0</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> one <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">let</span> two <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one <span class="token operator">===</span> two<span class="token punctuation">)</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>one <span class="token operator">===</span> <span class="token number">1</span><span class="token operator">/</span>two<span class="token punctuation">)</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',10),t={render:function(n,s){return p}}}}]);